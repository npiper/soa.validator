// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   UseCamelCaseInNamespacesAuditRule.java

package com.instantiations.eclipse.analysis.audit.webservices;

import com.instantiations.assist.eclipse.analysis.audit.rule.XMLFileAuditRule;
import com.instantiations.assist.eclipse.analysis.engine.core.*;
import com.instantiations.eclipse.analysis.utilities.StringUtilities;
import com.instantiations.jlib.xml.XMLElement;

// Referenced classes of package com.instantiations.eclipse.analysis.audit.webservices:
//            SimpleViolationForXMLCodeAuditor

public class UseCamelCaseInNamespacesAuditRule extends XMLFileAuditRule
{
    public class UseCamelCaseInNamespacesCodeAuditor extends SimpleViolationForXMLCodeAuditor
    {

        public boolean visit(XMLElement node)
        {
            String fullTagName = node.getTagName();
            String splitedName[] = StringUtilities.splitString(fullTagName, ":", true);
            String name = splitedName[splitedName.length - 1];
            if(!name.equals(UseCamelCaseInNamespacesAuditRule.TARGET_TAGS[0]) && !name.equals(UseCamelCaseInNamespacesAuditRule.TARGET_TAGS[1]))
                return true;
            String attrNames[] = node.getAttributeNames();
            for(int i = 0; i < attrNames.length; i++)
            {
                String attr = attrNames[i];
                String attrSplited[] = StringUtilities.splitString(attr, ":", true);
                String tmp = attrSplited[0];
                if(tmp.equals("targetNamespace") || tmp.equals("xmlns"))
                {
                    String value = node.getValue(attr);
                    if(value == null)
                        return true;
                    if(value.indexOf(" ") != -1 || value.indexOf("_") != -1)
                    {
                        String source = node.getSource();
                        int start = source.indexOf(attr);
                        int tagStart = source.indexOf(fullTagName);
                        int sourcePos = node.getSourcePosition();
                        int startPos = ((sourcePos - 1) + start) - (tagStart - 1);
                        int endPos = startPos + attr.length();
                        createViolation(startPos, endPos, "com.instantiations.eclipse.analysis.audit.webservices.useCamelCaseInNamespaces.use", new String[] {
                            value
                        });
                    }
                }
            }

            return true;
        }

        public UseCamelCaseInNamespacesCodeAuditor(AnalysisContext context, AnalysisItem item)
        {
            super(context, item);
        }
    }


    public UseCamelCaseInNamespacesAuditRule()
    {
    }

    public Analyzer createAnalyzer(AnalysisContext context)
    {
        return new UseCamelCaseInNamespacesCodeAuditor(context, this);
    }

    private static final String TARGET_TAGS[] = {
        "schema", "definitions"
    };
    private static final String TARGET_NAMESPACE = "targetNamespace";
    private static final String DEFAULT_NAMESPACE = "xmlns";
    private static final String VIOLATION_ID = "com.instantiations.eclipse.analysis.audit.webservices.useCamelCaseInNamespaces.use";


}
