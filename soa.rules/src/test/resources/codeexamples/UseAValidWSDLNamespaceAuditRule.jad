// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   UseAValidWSDLNamespaceAuditRule.java

package com.instantiations.eclipse.analysis.audit.webservices;

import com.instantiations.assist.eclipse.analysis.audit.core.AbstractAuditRule;
import com.instantiations.assist.eclipse.analysis.engine.core.*;
import com.instantiations.eclipse.analysis.utilities.StringUtilities;
import com.instantiations.jlib.xml.XMLElement;

// Referenced classes of package com.instantiations.eclipse.analysis.audit.webservices:
//            AuditRuleWithStringList, SimpleViolationForXMLCodeAuditor

public class UseAValidWSDLNamespaceAuditRule extends AuditRuleWithStringList
{
    public class UseAValidWSDLNamespaceCodeAuditor extends SimpleViolationForXMLCodeAuditor
    {

        public boolean visit(XMLElement node)
        {
            String fullTagName = node.getTagName();
            String fullTagNameSplit[] = StringUtilities.splitString(fullTagName, ":", true);
            String tagName = fullTagNameSplit[fullTagNameSplit.length - 1];
            if(!tagName.equals("definitions"))
                return true;
            String attrNames[] = node.getAttributeNames();
            for(int i = 0; i < attrNames.length; i++)
            {
                String attr = attrNames[i];
                if(!attr.equals("xmlns"))
                {
                    String attrNameSplit[] = StringUtilities.splitString(attr, ":", true);
                    String tmp = attrNameSplit[0];
                    if(tmp.equals("targetNamespace") || tmp.equals("xmlns"))
                    {
                        String value = node.getValue(attr);
                        boolean violated = false;
                        if(value == null)
                        {
                            violated = true;
                        } else
                        {
                            if(!containPrefix(value))
                                violated = true;
                            if(violated)
                            {
                                String source = node.getSource();
                                int start = source.indexOf(attr);
                                int tagStart = source.indexOf(fullTagName);
                                int sourcePos = node.getSourcePosition();
                                int startPos = ((sourcePos - 1) + start) - (tagStart - 1);
                                int endPos = startPos + attr.length();
                                createViolation(startPos, endPos, "com.instantiations.eclipse.analysis.audit.webservices.useAValidWSDLNamespace.use", _22_definitions_22_);
                            }
                        }
                    }
                }
            }

            return true;
        }

        public UseAValidWSDLNamespaceCodeAuditor(AnalysisContext context, AnalysisItem item)
        {
            super(context, item);
        }
    }


    public UseAValidWSDLNamespaceAuditRule()
    {
    }

    public Analyzer createAnalyzer(AnalysisContext context)
    {
        return new UseAValidWSDLNamespaceCodeAuditor(context, this);
    }

    private static final String TAG = "definitions";
    private static final String TARGET_NAMESPACE = "targetNamespace";
    private static final String DEFAULT_NAMESPACE = "xmlns";
    private static final String VIOLATION_ID = "com.instantiations.eclipse.analysis.audit.webservices.useAValidWSDLNamespace.use";

}
