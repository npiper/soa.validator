// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   MissingNamespaceVersionAuditRule.java

package com.instantiations.eclipse.analysis.audit.webservices;

import com.instantiations.assist.eclipse.analysis.audit.core.AbstractAuditRule;
import com.instantiations.assist.eclipse.analysis.audit.rule.XMLFileAuditRule;
import com.instantiations.assist.eclipse.analysis.engine.core.*;
import com.instantiations.eclipse.analysis.utilities.StringUtilities;
import com.instantiations.jlib.xml.XMLElement;

// Referenced classes of package com.instantiations.eclipse.analysis.audit.webservices:
//            SimpleViolationForXMLCodeAuditor

public class MissingNamespaceVersionAuditRule extends XMLFileAuditRule
{
    public class MissingNamespaceVersionCodeAuditor extends SimpleViolationForXMLCodeAuditor
    {

        public boolean visit(XMLElement node)
        {
            String tagName = node.getTagName();
            String splitTagName[] = StringUtilities.splitString(tagName, ":", true);
            if(splitTagName.length == 0)
                return true;
            String focus = splitTagName[splitTagName.length - 1];
            if(!TARGET_TAGS[0].equals(focus) && !TARGET_TAGS[1].equals(focus))
                return true;
            String attributeNames[] = node.getAttributeNames();
            for(int i = 0; i < attributeNames.length; i++)
            {
                String attr = attributeNames[i];
                String attrSplited[] = StringUtilities.splitString(attr, ":", true);
                String paramName = attrSplited[0];
                if(paramName.equals("targetNamespace") || paramName.equals("xmlns") && attrSplited.length != 1)
                {
                    String value = node.getValue(paramName);
                    if(!containVersionNumber(value))
                        createViolation(node, "com.instantiations.eclipse.analysis.audit.webservices.missingNamespaceVersion.missing", 
// JavaClassFileOutputException: get_constant: invalid tag

        private boolean containVersionNumber(String str)
        {
            if(str == null)
                return false;
            for(int i = str.length() - 1; i >= 0; i--)
            {
                char ch = str.toCharArray()[i];
                if(!Character.isDigit(ch) && Character.isLetter(ch) && ch == 'v' && i != str.length() - 1)
                    return true;
            }

            return false;
        }

        public MissingNamespaceVersionCodeAuditor(AnalysisContext context, AnalysisItem item)
        {
            SimpleViolationForXMLCodeAuditor(context, item);
        }
    }


    public MissingNamespaceVersionAuditRule()
    {
    }

    public Analyzer createAnalyzer(AnalysisContext context)
    {
        return new MissingNamespaceVersionCodeAuditor(context, this);
    }

    private final String TARGET_TAGS[] = {
        "schema", "definitions"
    };
    private final String VIOLATION_ID = "com.instantiations.eclipse.analysis.audit.webservices.missingNamespaceVersion.missing";


}
