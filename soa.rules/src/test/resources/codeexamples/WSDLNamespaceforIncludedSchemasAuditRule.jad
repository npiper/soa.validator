// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   WSDLNamespaceforIncludedSchemasAuditRule.java

package com.instantiations.eclipse.analysis.audit.webservices;

import com.instantiations.assist.eclipse.analysis.audit.core.AbstractAuditRule;
import com.instantiations.assist.eclipse.analysis.audit.rule.XMLFileAuditRule;
import com.instantiations.assist.eclipse.analysis.engine.core.*;
import com.instantiations.eclipse.analysis.utilities.StringUtilities;
import com.instantiations.jlib.xml.XMLElement;
import com.instantiations.jlib.xml.XMLNode;

// Referenced classes of package com.instantiations.eclipse.analysis.audit.webservices:
//            SimpleViolationForXMLCodeAuditor

public class WSDLNamespaceforIncludedSchemasAuditRule extends XMLFileAuditRule
{
    public class WSDLNamespaceforIncludedSchemasCodeAuditor extends SimpleViolationForXMLCodeAuditor
    {

        public boolean visit(XMLElement node)
        {
            String tagName = node.getTagName();
            String splitedTN[] = StringUtilities.splitString(tagName, ":", true);
            String focus = splitedTN[splitedTN.length - 1];
            String namespace = splitedTN[0];
            if(focus.equals("message"))
            {
                String parentNamespace = getDefinitionsNamespace(node);
                if(parentNamespace == null)
                {
                    if(namespace.equals("wsdl"))
                        createViolation(node, "com.instantiations.eclipse.analysis.audit.webservices.wSDLNamespaceforIncludedSchemas.use", getDefinitionsNamespace);
                    return true;
                }
                if(parentNamespace.equals("wsdl") && !namespace.equals("wsdl"))
                {
                    createViolation(node, "com.instantiations.eclipse.analysis.audit.webservices.wSDLNamespaceforIncludedSchemas.use", getDefinitionsNamespace);
                    return true;
                }
            }
            return true;
        }

        private String getDefinitionsNamespace(XMLNode node)
        {
            if(node instanceof XMLElement)
            {
                XMLElement tmp = (XMLElement)node;
                String tagName = tmp.getTagName();
                String splitedTN[] = StringUtilities.splitString(tagName, ":", true);
                String focus = splitedTN[splitedTN.length - 1];
                String namespace = splitedTN[0];
                if(focus.equals("definitions"))
                    return namespace;
                XMLNode parent = node.getParent();
                if(parent != null)
                    return getDefinitionsNamespace(parent);
                else
                    return null;
            } else
            {
                return null;
            }
        }

        public WSDLNamespaceforIncludedSchemasCodeAuditor(AnalysisContext context, AnalysisItem item)
        {
            super(context, item);
        }
    }


    public WSDLNamespaceforIncludedSchemasAuditRule()
    {
    }

    public Analyzer createAnalyzer(AnalysisContext context)
    {
        return new WSDLNamespaceforIncludedSchemasCodeAuditor(context, this);
    }

    private final String TARGET_TAG = "message";
    private final String WSDL_TAG = "definitions";
    private final String WSDL_NAMESPACE = "wsdl";
    private final String VIOLATION_ID = "com.instantiations.eclipse.analysis.audit.webservices.wSDLNamespaceforIncludedSchemas.use";

}
